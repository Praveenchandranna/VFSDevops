---
name: Deploy integration branch to integration and staging/uat orgs
on:
  push:
    branches:
      - Hotfix
    paths:
      - force-app/**
  #job to execute
jobs:
  Production_and_Hotfix_Deployment:
  #environment to run
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      # Nodejs Installation
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
      # The idea is that the VM can access your remote repository
      # because your repository is an sfdx project.
      # This is a default action that allows us to enter the root 
      # directory of the repository

      # Make sure to specify fetch-depth:0. This allows us to
      # access previous commits that have been pushed to the repository.

      # We'll need this later when we try to figure out which metadata has 
      # changed between commits, so that we can only deploy that metadata
      # to the destination org
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # Now, we need a way to let the developer specify which tests to run, which
      # could be all tests or just the tests relevant to their deployment.

      # To do this, we can ask the developer to name their test classes in the
      # body of the PR, using the following syntax

      # Apex::[CommunitiesLoginControllerTest,MyProfilePageControllerTest]::Apex
      # or Apex::[all]::Apex to run all tests

      # This special delimeter can be added to the PR template so that your 
      # team doesn't have to remember the syntax. 

      # Once a developer has specified a list of classes to run, we need to be able
      # to extract this information from the PR, and pass it on the the VM.

      - name: 'Read PR Body'
        env:
            # The pull request body is available through the github context object
            # we put the body of the pull request in an env variable (only available to this step)
          PR_BODY: ${{github.event.pull_request.body}}
        run: |
            echo $PR_BODY > - './pr_body.txt'
            node ./parsePR.js              
            TESTS=$(cat testsSpecific.txt)       
            echo "APEX_TESTS=$TESTS" >> $GITHUB_ENV
      #Apex class
      - name: 'Parse all tests'
        run: |
            node ./parseAllTests.js             
            ALLTESTS=$(cat testsAll.txt)       
            echo "APEX_TESTS_ALL=$ALLTESTS" >> $GITHUB_ENV  

      - name: Install Salesforce CLI
        run: |
          wget
          https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
          mkdir ~/sfdx
          tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
          echo "$HOME/sfdx/bin" >> $GITHUB_PATH
          ~/sfdx/bin/sfdx version

      # Then we install the SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
      # This is an awesome plugin that allows us to extract a package.xml with the metadata
      # that has changed between commits. I highly recommend going over the github readme 
      # for more information on how this works.
      - name: Installing sfdx git delta
        run: |
          echo y | sfdx plugins:install sfdx-git-delta
          sfdx plugins 
        # Install java as it is required for the next step
        # - name: 'Installing java'
        #   run: sudo apt-get install openjdk-8-jdk

        # Install SFDX scanner
        # - name: 'Installing SFDX scanner'
        #   run: sfdx plugins:install @salesforce/sfdx-scanner

        # Prior to setting up this workflow, you have to create a Github Secret
        # that contains the sfdx url of the dev/int orgs.

        # The steps to generate the url are here 
        # https://developer.salesforce.com/docs/atlas.en-us.sfdx_cli_reference.meta/sfdx_cli_reference/cli_reference_auth_sfdxurl.htm

        # This URL can then be used with the sfdx auth:sfdxurl:store to authenticate
        # the sfdx project in the repositry, against the org from which the URL
        # was generated from. This works just like that, there's no need to create
        # connected apps or any else. 

        # The URL is stored in the Github Secret named SFDX_DEVELOPMENT_URL
        # so here we store the URL into a text file
    
      - name: Populate auth file with SFDX_URL secret of the integration and staging orgs
        shell: bash
        run: echo "${{ secrets.SALESFORCE_JWT_SECRET_KEY }}" > server.key
      - name: Create delta packages for new, modified or deleted metadata
        run: |
          mkdir changed-sources 
          sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/     

      - name: Authenticate to Production Org
        run: sfdx force:auth:jwt:grant --clientid=${{ secrets.SALESFORCE_CONSUMER_KEY_QA}} --jwtkeyfile=server.key --username=${{secrets.SALESFORCE_QA_USERNAME }} --setdefaultdevhubusername
        
      - name: 'Validation Against Production org - run specified tests in PR'
        if: ${{ env.APEX_TESTS != 'all' }}
        run: |
            echo ${{env.APEX_TESTS}}
            sfdx force:source:deploy --checkonly -p "force-app" --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS}} -u ${{ secrets.SALESFORCE_QA_USERNAME }}

      - name: Deploy To Production org
        if: ${{ env.APEX_TESTS == 'all' }}
        run: |
            echo ${{env.APEX_TESTS_ALL}}
            sfdx force:source:deploy -p "force-app" --testlevel RunSpecifiedTests --runtests ${{env.APEX_TESTS_ALL}} -u ${{secrets.SALESFORCE_QA_USERNAME }}

      - name: Authenticate to hotfix Org
        run: sfdx force:auth:jwt:grant --clientid=${{secrets.SALESFORCE_CONSUMER_KEY_UAT }} --jwtkeyfile=server.key --username=${{ secrets.SALESFORCE_UAT_USERNAME }} --setdefaultdevhubusername

      - name: 'Deploying to hotfix org'
        run: sfdx force:source:deploy -p force-app --testlevel NoTestRun -u ${{ secrets.SALESFORCE_UAT_USERNAME }}